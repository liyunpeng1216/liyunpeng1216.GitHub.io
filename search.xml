<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>插入排序及归并排序</title>
    <url>/posts/50d558e/</url>
    <content><![CDATA[<h1 id="将输入的数组从小到大排序"><a href="#将输入的数组从小到大排序" class="headerlink" title="将输入的数组从小到大排序"></a>将输入的数组从小到大排序</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = input(<span class="string">'请输入要排序的数组（请用逗号或空格将数字分开）：'</span>)</span><br><span class="line">pre_list = a.split(<span class="string">','</span> <span class="keyword">or</span> <span class="string">' '</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    list = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> pre_list]</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">1</span>, len(list)):</span><br><span class="line">        <span class="keyword">while</span> list[l] &lt; list[l - <span class="number">1</span>] <span class="keyword">and</span> l &gt; <span class="number">0</span>:</span><br><span class="line">            list[l], list[l - <span class="number">1</span>] = list[l - <span class="number">1</span>], list[l]</span><br><span class="line">            l -= <span class="number">1</span></span><br><span class="line">    print(list)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'请输入数字并用","or" "将数字分开'</span>)</span><br></pre></td></tr></table></figure>
<h1 id="分治归并法排序"><a href="#分治归并法排序" class="headerlink" title="分治归并法排序"></a>分治归并法排序</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(list_a, list_b)</span>:</span></span><br><span class="line">    <span class="string">"""将分治的列表排序归并"""</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> list_a[i] &lt;= list_b[j]:</span><br><span class="line">            list.append(list_a[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> list_a[i] &gt; list_b[j]:</span><br><span class="line">            list.append(list_b[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= len(list_a):</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> list_b[j:]:</span><br><span class="line">                list.append(a)</span><br><span class="line">            <span class="keyword">return</span> list</span><br><span class="line">        <span class="keyword">elif</span> j &gt;= len(list_b):</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> list_a[i:]:</span><br><span class="line">                list.append(b)</span><br><span class="line">            <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="string">"""将列表不断二分，方便sort函数分治归并排序"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        list_a = list[<span class="number">0</span> : len(list)//<span class="number">2</span>]</span><br><span class="line">        list_b = list[(len(list)//<span class="number">2</span>):]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'列表分割不对！'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> len(list_a) &gt;= <span class="number">2</span>:</span><br><span class="line">            list_a = merge(list_a)</span><br><span class="line">        <span class="keyword">if</span> len(list_b) &gt;= <span class="number">2</span>:</span><br><span class="line">            list_b = merge(list_b)</span><br><span class="line">        list_ = sort(list_a, list_b)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list_</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'列表赋值有问题！'</span>)</span><br><span class="line"></span><br><span class="line">a = input(<span class="string">'请输入要排序的数组（请用逗号或空格将数字分开）：'</span>)</span><br><span class="line">pre_list = a.split(<span class="string">','</span> <span class="keyword">or</span> <span class="string">' '</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    list_ = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> pre_list]</span><br><span class="line">    list_ = merge(list_)</span><br><span class="line">    print(list_)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'请输入数字并用","or" "将数字分开'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>programing</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>OTSU算法在图像处理中的应用</title>
    <url>/posts/e13fdafb/</url>
    <content><![CDATA[<p>​        博主近期需要处理原子力显微镜图，测量AFM相图中片晶厚度，本着一劳永逸的想法，直接代码实现这个目标。这里博主放上实现这个目标基础但很关键的一步代码，即通过大津算法（OTSU算法）求出图片前景和背景的阈值，并基于此对图像进行分割处理，已实现后面对图片中信息的处理和挖掘。</p>
<p>​       这里博主编写的是单阈值OTSU法，采用的是面向对象的写法。首先简单介绍一下OTUS算法的原理，一张图片粗略来分可以分为前景和背景，当两部分类间方差最大时，对应的阈值（threshold)即为二分的最佳阈值。具体数学实现过程如下：</p>
<script type="math/tex; mode=display">
首先将图像灰度化（0-255），假设图中包含m个灰度级，各个灰度级像素点数分别为N_0,N_1,...,N_{m-1},\\那么灰度值为i(i\epsilon m)的占比P_i为:\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad</script><script type="math/tex; mode=display">
P_i=\frac{N_i}{N}</script><script type="math/tex; mode=display">
图像灰度的均值为:\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad\quad</script><script type="math/tex; mode=display">
Avg = \sum_{i=0}^{m-1}{i*Pi}</script><script type="math/tex; mode=display">
\quad\quad这里先定义阈值为thr，则thr将图像分为前景(foreground,fg)和背景(blackground,bg),两者占比分别为P_{fg}和P_{bg},前景和背景的灰度\\均值为Avg_{fg}和Avg_{bg}则有:</script><script type="math/tex; mode=display">
P_{fg}=\sum_{i=0}^{thr}Pi</script><script type="math/tex; mode=display">
P_{bg}=1-\sum_{i=0}^{thr}Pi</script><script type="math/tex; mode=display">
Avg_{fg}=\frac{\sum_{i=0}^{thr}{i*Pi}}{P_{fg}}</script><script type="math/tex; mode=display">
Avg_{bg}=\frac{Avg-\sum_{i=0}^{thr}{i*Pi}}{P_{bg}}</script><script type="math/tex; mode=display">
\quad\quad定义前景和背景的类间方差{\sigma}^2,则有:</script><script type="math/tex; mode=display">
{\sigma}^2=P_{fg}*(Avg-Avg_{fg})^2+P_{bg}*(Avg-Avg_{bg})^2</script><script type="math/tex; mode=display">
\quad\quad{\sigma}^2最大时对应的thr即为最优阈值thr_{optimal}。</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from matplotlib import font_manager as fm, rcParams</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class img_process(object):</span><br><span class="line">    &quot;&quot;&quot;用来处理图像以及分析图中的数据&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, img):</span><br><span class="line">        img.show()</span><br><span class="line">        self.img_array &#x3D; np.array(img)</span><br><span class="line">        self.img_array_fl &#x3D; self.img_array.flatten()</span><br><span class="line">        # 图像名义尺寸和实际尺寸</span><br><span class="line">        self.pix_weight, self.pix_height &#x3D; img.size</span><br><span class="line">        self.N &#x3D; self.pix_weight * self.pix_height</span><br><span class="line">        self.ut &#x3D; 0</span><br><span class="line">        self.P_list &#x3D; []</span><br><span class="line">        self.u_list &#x3D; []</span><br><span class="line">        # 将图像数组转化为灰度直方图</span><br><span class="line">        self.gray_list &#x3D; img.histogram()</span><br><span class="line">        self.kdet &#x3D; 0</span><br><span class="line">        self.kt &#x3D; 0</span><br><span class="line"></span><br><span class="line">    def gray_his(self):</span><br><span class="line">        &quot;&quot;&quot;绘制图像的灰度直方图&quot;&quot;&quot;</span><br><span class="line">        plt.rcParams[&#39;font.sans-serif&#39;] &#x3D; [&#39;SimHei&#39;]</span><br><span class="line">        plt.rcParams[&#39;axes.unicode_minus&#39;] &#x3D; False</span><br><span class="line">        n, bins, patches &#x3D; plt.hist(self.img_array_fl, bins&#x3D;256, align&#x3D;&#39;mid&#39;)</span><br><span class="line">        plt.xlim(0, 256)</span><br><span class="line">        plt.ylim((0, max(self.gray_list)))</span><br><span class="line">        plt.xlabel(&#39;灰度值&#39;)</span><br><span class="line">        plt.ylabel(&#39;像素点频数&#39;)</span><br><span class="line">        plt.title(&#39;灰度分布直方图&#39;)</span><br><span class="line">        # plt.savefig(&#39;C:&#x2F;Users&#x2F;yplit&#x2F;Pictures&#x2F;灰度直方图.jpg&#39;)</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line">    def otsu_process(self):</span><br><span class="line"></span><br><span class="line">        # 大津算法求图像分割阈值</span><br><span class="line"></span><br><span class="line">        &quot;&quot;&quot; 列出所有要用到的参数,总的像素点个数N,灰度值为i的像素点个数Ni,灰度值为i占比为Pi,，</span><br><span class="line">         像素点总均值ut,图像分割阈值t,前景包含的像素点的类概率及类均值为w0和u0,背景包含</span><br><span class="line">         的像素点的类概率及类均值为w1和u1,类间方差为det</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        for i in range(len(self.gray_list)):</span><br><span class="line">            Pi &#x3D; self.gray_list[i] &#x2F; self.N</span><br><span class="line">            self.P_list.append(Pi)</span><br><span class="line">            ui &#x3D; i * Pi</span><br><span class="line">            self.u_list.append(ui)</span><br><span class="line">            self.ut +&#x3D; ui</span><br><span class="line"></span><br><span class="line">        for t in range(len(self.gray_list)):</span><br><span class="line">            w0 &#x3D; sum(self.P_list[:t + 1])</span><br><span class="line">            w1 &#x3D; 1 - w0</span><br><span class="line">            u0 &#x3D; sum(self.u_list[:t + 1]) &#x2F; w0</span><br><span class="line">            if w1 !&#x3D; 0:</span><br><span class="line">                u1 &#x3D; (self.ut - u0 * w0) &#x2F; w1</span><br><span class="line">                det &#x3D; w0 * (u0 - self.ut) ** 2 + w1 * (self.ut - u1) ** 2</span><br><span class="line">                if det &gt;&#x3D; self.kdet:</span><br><span class="line">                    self.kdet, self.kt &#x3D; det, t</span><br><span class="line">        print(&#39;图像分割阈值为%a&#39; % self.kt)</span><br><span class="line">        return self.kt</span><br><span class="line"></span><br><span class="line">    def b_w(self, t, j &#x3D; True):</span><br><span class="line">        &quot;&quot;&quot;已计算得到的阈值为依据将图像转化为二进制图,j默认为True，</span><br><span class="line">        根据图片的实际情况选择&quot;&quot;&quot;</span><br><span class="line">        if j:</span><br><span class="line">            for i in range(self.pix_height):</span><br><span class="line">                for j in range(self.pix_weight):</span><br><span class="line">                    if self.img_array[i][j] &lt;&#x3D; t:</span><br><span class="line">                        self.img_array[i][j] &#x3D; 0</span><br><span class="line">                    else:</span><br><span class="line">                        self.img_array[i][j] &#x3D; 255</span><br><span class="line">        else:</span><br><span class="line">            for i in range(self.pix_height):</span><br><span class="line">                for j in range(self.pix_weight):</span><br><span class="line">                    if self.img_array[i][j] &lt;&#x3D; t:</span><br><span class="line">                        self.img_array[i][j] &#x3D; 255</span><br><span class="line">                    else:</span><br><span class="line">                        self.img_array[i][j] &#x3D; 0</span><br><span class="line">        img &#x3D; Image.fromarray(self.img_array)</span><br><span class="line">        img.show()</span><br><span class="line">        return self.img_array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    # 打开图像</span><br><span class="line">    img &#x3D; Image.open(</span><br><span class="line">        &#39;C:&#x2F;Users&#x2F;yplit&#x2F;Desktop&#x2F;微信图片_20200823190646.jpg&#39;)</span><br><span class="line">    # RGB转灰度图 两种方法(直接调用covert转化或者利用numpy写函数)</span><br><span class="line">    img &#x3D; img.convert(&#39;L&#39;)</span><br><span class="line">    img_obj &#x3D; img_process(img)</span><br><span class="line">    t &#x3D; img_obj.otsu_process()</span><br><span class="line">    img_distance &#x3D; img_obj.b_w(t, True)</span><br><span class="line">    img_obj.gray_his()</span><br><span class="line"></span><br><span class="line">    # img_array &#x3D; np.array(img)</span><br><span class="line">    # gray &#x3D; np.dot(img_array[..., :3], (0.299, 0.587, 0.114))</span><br><span class="line">    # img &#x3D; Image.fromarray(gray)</span><br><span class="line">    # img.show()</span><br></pre></td></tr></table></figure>
<p>​        事实上python有自带的otsu算法函数，这里博主只是根据算法的数学原理去实现了对最优阈值的求解，那么通过这个最优阈值对图像进行二分后就可以继续图像信息的挖掘。</p>
]]></content>
      <categories>
        <category>image processing</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>算法</tag>
        <tag>图像处理</tag>
      </tags>
  </entry>
</search>
