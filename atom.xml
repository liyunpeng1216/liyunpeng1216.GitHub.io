<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ypli的个人博客</title>
  
  <subtitle>一只划水的猪</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ypli1216.top/"/>
  <updated>2020-10-23T08:30:19.083Z</updated>
  <id>http://www.ypli1216.top/</id>
  
  <author>
    <name>liyunpeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何利用python将视频转成字符画视频</title>
    <link href="http://www.ypli1216.top/posts/74c2be76/"/>
    <id>http://www.ypli1216.top/posts/74c2be76/</id>
    <published>2020-10-22T16:00:00.000Z</published>
    <updated>2020-10-23T08:30:19.083Z</updated>
    
    <content type="html"><![CDATA[<p>​        博主最近做了个跟科研无关的东西-视频转字符画视频，额，略显无聊哈。咱直接切入正题，这玩意到底咋实现呢？不急听我娓娓道来。其实很简单，将视频分解成一帧帧图片，再将图片转成字符图片，再将字符图片合成视频。对的，就是这样，下面放上博主写的源代码。这里多嘴一句哈，我觉得学习编程，理清思路是非常重要的，我的思路都反映在源码上了，这也是每次说一下思路就直接上菜的原因，我个人水平有限，相信大家都能看懂。啧啧啧，又开始话痨了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">video_chr_figure</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, video_adr)</span>:</span></span><br><span class="line">        self.txt = <span class="string">''</span></span><br><span class="line">        self.video_adr = video_adr</span><br><span class="line">        self.pix_weight = <span class="number">0</span></span><br><span class="line">        self.pix_height = <span class="number">0</span></span><br><span class="line">        print(<span class="string">'即将载入的视频是%s'</span> % re.search(<span class="string">r'(.*)\..*'</span>, video_adr).group(<span class="number">1</span>))</span><br><span class="line">        self.ascii_char = list(<span class="string">"$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\"^`'. "</span>)</span><br><span class="line">        self.chr_l = len(self.ascii_char)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将视频转化为图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">video_fig</span><span class="params">(self)</span>:</span></span><br><span class="line">        cap = cv2.VideoCapture(self.video_adr)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">                ret, frame = cap.read()</span><br><span class="line">                fig_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                    print(<span class="string">'视频读取错误，请检查视频格式'</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                self.pix_weight = int(np.size(np.array(fig_gray), <span class="number">1</span>) / <span class="number">6</span>)</span><br><span class="line">                self.pix_height = int(np.size(np.array(fig_gray), <span class="number">0</span>) / <span class="number">6</span>)</span><br><span class="line">                img = Image.fromarray(fig_gray)</span><br><span class="line">                img.save(<span class="string">'C:/Users/yplit/Documents/python projects/ceshi/'</span> + <span class="string">'img_'</span> + str(i) + <span class="string">'.jpg'</span>)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图片转化为字符画</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fig_ch</span><span class="params">(self, num)</span>:</span></span><br><span class="line"></span><br><span class="line">        img = cv2.imread(<span class="string">'C:/Users/yplit/Documents/python projects/ceshi/'</span> + <span class="string">'img_'</span> + str(num) + <span class="string">'.jpg'</span>, <span class="number">0</span>)</span><br><span class="line">        im_g = cv2.resize(img, (self.pix_weight, self.pix_height), interpolation = cv2.INTER_AREA)</span><br><span class="line">        print(self.pix_height, self.pix_weight)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(self.pix_height):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.pix_weight):</span><br><span class="line">                pix_ch = self.ascii_char[int(im_g[k][j] / <span class="number">256</span> * self.chr_l)]</span><br><span class="line"></span><br><span class="line">                self.txt += pix_ch</span><br><span class="line">            self.txt += <span class="string">'\r\n'</span></span><br><span class="line">        <span class="comment"># print(self.txt)</span></span><br><span class="line">        im = Image.new(<span class="string">'L'</span>, (self.pix_weight *<span class="number">3</span>, self.pix_height*<span class="number">9</span>), <span class="number">255</span>)</span><br><span class="line">        dr = ImageDraw.Draw(im)</span><br><span class="line">        font = ImageFont.truetype(os.path.join(<span class="string">"fonts"</span>, <span class="string">"simsun.ttc"</span>), <span class="number">5</span>)</span><br><span class="line">        dr.text((<span class="number">0</span>, <span class="number">0</span>), self.txt, font=font, fill=<span class="string">"#000000"</span>)</span><br><span class="line">        img = im.resize((self.pix_weight *<span class="number">6</span>, self.pix_height*<span class="number">6</span>))</span><br><span class="line">        img.save(<span class="string">'C:/Users/yplit/Documents/python projects/ceshi/'</span> + <span class="string">'img_'</span> + str(num) + <span class="string">'.jpg'</span>)</span><br><span class="line">        <span class="keyword">del</span> dr</span><br><span class="line">        im.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符画转变为视频</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fig_vid</span><span class="params">(self, i)</span>:</span></span><br><span class="line"></span><br><span class="line">        fps = <span class="number">25</span></span><br><span class="line">        size = (self.pix_weight * <span class="number">6</span>, self.pix_height * <span class="number">6</span>)</span><br><span class="line">        videowriter = cv2.VideoWriter(<span class="string">'C:/Users/yplit/Documents/python projects/ceshi/2/ceshi.avi'</span>,</span><br><span class="line">                                      cv2.VideoWriter_fourcc(<span class="string">'M'</span>, <span class="string">'J'</span>, <span class="string">'P'</span>,<span class="string">'G'</span>), fps, size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(i):</span><br><span class="line">            frame = cv2.imread(<span class="string">'C:/Users/yplit/Documents/python projects/ceshi/2/'</span> + <span class="string">'img_'</span> + str(k) + <span class="string">'.jpg'</span>)</span><br><span class="line">            videowriter.write(frame)</span><br><span class="line">        videowriter.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    vcf = video_chr_figure(<span class="string">'C:/Users/yplit/Documents/WeChat Files/wxid_vh6shev3b8lj22/FileStorage/Video/2020-08/ceshi.mp4'</span>)</span><br><span class="line">    i = vcf.video_fig()</span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">207</span>, i):</span><br><span class="line">        t = threading.Thread(target=vcf.fig_ch, args=(num,))</span><br><span class="line">        t.start()</span><br><span class="line">        a.append(t)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> a:</span><br><span class="line">        t.join()</span><br><span class="line">    vcf.fig_vid(i)</span><br></pre></td></tr></table></figure><p>代码还可进一步优化，如果视频大并且电脑配置低的建议优化一下代码再运行，效果图如下。</p><p><img src="./img/ceshi.gif" alt=""></p><p><img src="C:\Users\yplit\Documents\GitHub\liyunpeng1216.GitHub.io\source\img\ceshi.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      利用python实现视频转字符画视频
    
    </summary>
    
    
      <category term="image processing, video processing" scheme="http://www.ypli1216.top/categories/image-processing-video-processing/"/>
    
    
      <category term="python" scheme="http://www.ypli1216.top/tags/python/"/>
    
      <category term="视频处理" scheme="http://www.ypli1216.top/tags/%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>OTSU算法在图像处理中的应用</title>
    <link href="http://www.ypli1216.top/posts/e13fdafb/"/>
    <id>http://www.ypli1216.top/posts/e13fdafb/</id>
    <published>2020-08-22T16:00:00.000Z</published>
    <updated>2020-08-26T01:31:20.686Z</updated>
    
    <content type="html"><![CDATA[<p>​        博主近期需要处理原子力显微镜图，测量AFM相图中片晶厚度，本着一劳永逸的想法，直接代码实现这个目标。这里博主放上实现这个目标基础但很关键的一步代码，即通过大津算法（OTSU算法）求出图片前景和背景的阈值，并基于此对图像进行分割处理，已实现后面对图片中信息的处理和挖掘。</p><p>​        这里博主编写的是单阈值OTSU法，采用的是面向对象的写法。首先简单介绍一下OTUS算法的原理，一张图片粗略来分可以分为前景和背景，当两部分类间方差最大时，对应的阈值（threshold)即为二分的最佳阈值。具体数学实现过程如下：</p><p>​        首先将图像灰度化（0-255），假设图中包含m个灰度级，各个灰度级像素点数分别为$N_0,N_1,…,N_{m-1}$,那么灰度值为i(i$\epsilon$m)的占比$P_i$为:</p><script type="math/tex; mode=display">P_i=\frac{N_i}{N}</script><p>​        图像灰度的均值为:</p><script type="math/tex; mode=display">Avg = \sum_{i=0}^{m-1}{i*Pi}</script><p>​        这里先定义阈值为thr, 则thr将图像分为前景(foreground, fg)和背景(blackground, bg), 两者占比分别为$P_{fg}$和$P_{bg}$, 前景和背景的灰度均值为$Avg_{fg}$和$Avg_{bg}$则有:</p><script type="math/tex; mode=display">P_{fg}=\sum_{i=0}^{thr}Pi</script><script type="math/tex; mode=display">P_{bg}=1-\sum_{i=0}^{thr}Pi</script><script type="math/tex; mode=display">Avg_{fg}=\frac{\sum_{i=0}^{thr}{i*Pi}}{P_{fg}}</script><script type="math/tex; mode=display">Avg_{bg}=\frac{Avg-\sum_{i=0}^{thr}{i*Pi}}{P_{bg}}</script><p>​        定义前景和背景的类间方差${\sigma}^2$,则有:</p><script type="math/tex; mode=display">{\sigma}^2=P_{fg}*(Avg-Avg_{fg})^2+P_{bg}*(Avg-Avg_{bg})^2</script><p>​        ${\sigma}^2$最大时对应的thr即为最优阈值$thr_{optimal}$。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from matplotlib import font_manager as fm, rcParams</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class img_process(object):</span><br><span class="line">    &quot;&quot;&quot;用来处理图像以及分析图中的数据&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, img):</span><br><span class="line">        img.show()</span><br><span class="line">        self.img_array &#x3D; np.array(img)</span><br><span class="line">        self.img_array_fl &#x3D; self.img_array.flatten()</span><br><span class="line">        # 图像名义尺寸和实际尺寸</span><br><span class="line">        self.pix_weight, self.pix_height &#x3D; img.size</span><br><span class="line">        self.N &#x3D; self.pix_weight * self.pix_height</span><br><span class="line">        self.Avg &#x3D; 0</span><br><span class="line">        self.P_list &#x3D; []</span><br><span class="line">        self.Avg_list &#x3D; []</span><br><span class="line">        # 将图像数组转化为灰度直方图</span><br><span class="line">        self.gray_list &#x3D; img.histogram()</span><br><span class="line">        self.kdet &#x3D; 0</span><br><span class="line">        self.kt &#x3D; 0</span><br><span class="line"></span><br><span class="line">    def gray_his(self):</span><br><span class="line">        &quot;&quot;&quot;绘制图像的灰度直方图&quot;&quot;&quot;</span><br><span class="line">        plt.rcParams[&#39;font.sans-serif&#39;] &#x3D; [&#39;SimHei&#39;]</span><br><span class="line">        plt.rcParams[&#39;axes.unicode_minus&#39;] &#x3D; False</span><br><span class="line">        n, bins, patches &#x3D; plt.hist(self.img_array_fl, bins&#x3D;256, align&#x3D;&#39;mid&#39;)</span><br><span class="line">        plt.xlim(0, 256)</span><br><span class="line">        plt.ylim((0, max(self.gray_list)))</span><br><span class="line">        plt.xlabel(&#39;灰度值&#39;)</span><br><span class="line">        plt.ylabel(&#39;像素点频数&#39;)</span><br><span class="line">        plt.title(&#39;灰度分布直方图&#39;)</span><br><span class="line">        # plt.savefig(&#39;C:&#x2F;Users&#x2F;yplit&#x2F;Pictures&#x2F;灰度直方图.jpg&#39;)</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line">    def otsu_process(self):</span><br><span class="line"></span><br><span class="line">        # 大津算法求图像分割阈值</span><br><span class="line"></span><br><span class="line">        &quot;&quot;&quot; 列出所有要用到的参数,总的像素点个数N,灰度值为i的像素点个数Ni,灰度值为i占比为Pi,，</span><br><span class="line">         像素点总均值Avg,图像分割阈值thr,前景包含的像素点的类概率及类均值为P_fg和Avg_fg,背景包含</span><br><span class="line">         的像素点的类概率及类均值为P_bg和Avg_bg,类间方差为det</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        for i in range(len(self.gray_list)):</span><br><span class="line">            Pi &#x3D; self.gray_list[i] &#x2F; self.N</span><br><span class="line">            self.P_list.append(Pi)</span><br><span class="line">            Avg_i &#x3D; i * Pi</span><br><span class="line">            self.Avg_list.append(Avg_i)</span><br><span class="line">            self.Avg +&#x3D; Avg_i</span><br><span class="line"></span><br><span class="line">        for thr in range(len(self.gray_list)):</span><br><span class="line">            P_fg &#x3D; sum(self.P_list[:thr + 1])</span><br><span class="line">            P_bg &#x3D; 1 - P_fg</span><br><span class="line">            Avg_fg &#x3D; sum(self.Avg_list[:thr + 1]) &#x2F; P_fg</span><br><span class="line">            if P_bg !&#x3D; 0:</span><br><span class="line">                Avg_bg &#x3D; (self.Avg - Avg_fg *  P_fg) &#x2F; P_bg</span><br><span class="line">                det &#x3D; P_fg * (Avg_fg - self.Avg) ** 2 + P_bg * (self.Avg - Avg_bg) ** 2</span><br><span class="line">                if det &gt;&#x3D; self.kdet:</span><br><span class="line">                    self.kdet, self.kt &#x3D; det, thr</span><br><span class="line">        print(&#39;图像分割阈值为%a&#39; % self.kt)</span><br><span class="line">        return self.kt</span><br><span class="line"></span><br><span class="line">    def b_w(self, t, j &#x3D; True):</span><br><span class="line">        &quot;&quot;&quot;已计算得到的阈值为依据将图像转化为二进制图,j默认为True，</span><br><span class="line">        根据图片的实际情况选择&quot;&quot;&quot;</span><br><span class="line">        if j:</span><br><span class="line">            for i in range(self.pix_height):</span><br><span class="line">                for j in range(self.pix_weight):</span><br><span class="line">                    if self.img_array[i][j] &lt;&#x3D; t:</span><br><span class="line">                        self.img_array[i][j] &#x3D; 0</span><br><span class="line">                    else:</span><br><span class="line">                        self.img_array[i][j] &#x3D; 255</span><br><span class="line">        else:</span><br><span class="line">            for i in range(self.pix_height):</span><br><span class="line">                for j in range(self.pix_weight):</span><br><span class="line">                    if self.img_array[i][j] &lt;&#x3D; t:</span><br><span class="line">                        self.img_array[i][j] &#x3D; 255</span><br><span class="line">                    else:</span><br><span class="line">                        self.img_array[i][j] &#x3D; 0</span><br><span class="line">        img &#x3D; Image.fromarray(self.img_array)</span><br><span class="line">        img.show()</span><br><span class="line">        return self.img_array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    # 打开图像</span><br><span class="line">    img &#x3D; Image.open(</span><br><span class="line">        &#39;C:&#x2F;Users&#x2F;yplit&#x2F;Desktop&#x2F;微信图片_20200823190646.jpg&#39;)</span><br><span class="line">    # RGB转灰度图 两种方法(直接调用covert转化或者利用numpy写函数)</span><br><span class="line">    img &#x3D; img.convert(&#39;L&#39;)</span><br><span class="line">    img_obj &#x3D; img_process(img)</span><br><span class="line">    t &#x3D; img_obj.otsu_process()</span><br><span class="line">    img_distance &#x3D; img_obj.b_w(t, True)</span><br><span class="line">    img_obj.gray_his()</span><br><span class="line"></span><br><span class="line">    # img_array &#x3D; np.array(img)</span><br><span class="line">    # gray &#x3D; np.dot(img_array[..., :3], (0.299, 0.587, 0.114))</span><br><span class="line">    # img &#x3D; Image.fromarray(gray)</span><br><span class="line">    # img.show()</span><br></pre></td></tr></table></figure><p>​        事实上python有自带的otsu算法函数，这里博主只是根据算法的数学原理去实现了对最优阈值的求解，那么通过这个最优阈值对图像进行二分后就可以继续图像信息的挖掘。</p>]]></content>
    
    <summary type="html">
    
      利用python实现otsu算法并对图像进行二分
    
    </summary>
    
    
      <category term="image processing" scheme="http://www.ypli1216.top/categories/image-processing/"/>
    
    
      <category term="python" scheme="http://www.ypli1216.top/tags/python/"/>
    
      <category term="算法" scheme="http://www.ypli1216.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图像处理" scheme="http://www.ypli1216.top/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>插入排序及归并排序</title>
    <link href="http://www.ypli1216.top/posts/50d558e/"/>
    <id>http://www.ypli1216.top/posts/50d558e/</id>
    <published>2020-07-24T16:00:00.000Z</published>
    <updated>2020-08-03T12:23:46.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将输入的数组从小到大排序"><a href="#将输入的数组从小到大排序" class="headerlink" title="将输入的数组从小到大排序"></a>将输入的数组从小到大排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = input(<span class="string">'请输入要排序的数组（请用逗号或空格将数字分开）：'</span>)</span><br><span class="line">pre_list = a.split(<span class="string">','</span> <span class="keyword">or</span> <span class="string">' '</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    list = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> pre_list]</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">1</span>, len(list)):</span><br><span class="line">        <span class="keyword">while</span> list[l] &lt; list[l - <span class="number">1</span>] <span class="keyword">and</span> l &gt; <span class="number">0</span>:</span><br><span class="line">            list[l], list[l - <span class="number">1</span>] = list[l - <span class="number">1</span>], list[l]</span><br><span class="line">            l -= <span class="number">1</span></span><br><span class="line">    print(list)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'请输入数字并用","or" "将数字分开'</span>)</span><br></pre></td></tr></table></figure><h1 id="分治归并法排序"><a href="#分治归并法排序" class="headerlink" title="分治归并法排序"></a>分治归并法排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(list_a, list_b)</span>:</span></span><br><span class="line">    <span class="string">"""将分治的列表排序归并"""</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> list_a[i] &lt;= list_b[j]:</span><br><span class="line">            list.append(list_a[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> list_a[i] &gt; list_b[j]:</span><br><span class="line">            list.append(list_b[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= len(list_a):</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> list_b[j:]:</span><br><span class="line">                list.append(a)</span><br><span class="line">            <span class="keyword">return</span> list</span><br><span class="line">        <span class="keyword">elif</span> j &gt;= len(list_b):</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> list_a[i:]:</span><br><span class="line">                list.append(b)</span><br><span class="line">            <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="string">"""将列表不断二分，方便sort函数分治归并排序"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        list_a = list[<span class="number">0</span> : len(list)//<span class="number">2</span>]</span><br><span class="line">        list_b = list[(len(list)//<span class="number">2</span>):]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'列表分割不对！'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> len(list_a) &gt;= <span class="number">2</span>:</span><br><span class="line">            list_a = merge(list_a)</span><br><span class="line">        <span class="keyword">if</span> len(list_b) &gt;= <span class="number">2</span>:</span><br><span class="line">            list_b = merge(list_b)</span><br><span class="line">        list_ = sort(list_a, list_b)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list_</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'列表赋值有问题！'</span>)</span><br><span class="line"></span><br><span class="line">a = input(<span class="string">'请输入要排序的数组（请用逗号或空格将数字分开）：'</span>)</span><br><span class="line">pre_list = a.split(<span class="string">','</span> <span class="keyword">or</span> <span class="string">' '</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    list_ = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> pre_list]</span><br><span class="line">    list_ = merge(list_)</span><br><span class="line">    print(list_)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'请输入数字并用","or" "将数字分开'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      排序算法的python实现
    
    </summary>
    
    
      <category term="programing" scheme="http://www.ypli1216.top/categories/programing/"/>
    
    
      <category term="python" scheme="http://www.ypli1216.top/tags/python/"/>
    
      <category term="算法" scheme="http://www.ypli1216.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
